from collections import defaultdict, Counter
from itertools import product
import logging
from possibility_dictionary_generation import read_possibility_dictionary
from conllu_parser import read_feature_counts

# Generated by script in extract-ud2gf-cat-labels.py and data from the ud2gf UDTranslate.labels
POSSIBLE_GF_CATS_BY_UD_CAT = defaultdict(list, {'NOUN': ['N'],
                                 'PROPN': ['PN'],
                                 'ADJ': ['A', 'AdA'],
                                 'VERB': ['V', 'V2', 'V3', 'VV', 'VA', 'VS', 'VQ', 'V2V', 'V2A', 'V2S', 'V2Q'],
                                 'AUX': ['VV'],
                                 'ADV': ['AdA', 'AdN', 'AdV', 'Adv', 'IAdv', 'Subj'],
                                 'CONJ': ['Conj'],
                                 'PRON': ['Pron', 'NP', 'Det', 'IP'],
                                 'DET': ['Predet', 'Det', 'IDet', 'Quant', 'IQuant'],
                                 'INTJ': ['Interj'],
                                 'ADP': ['Prep'],
                                 'SCONJ': ['Subj']})



def parse_languages(languages, feature_count_files, poss_dict_files):

    features = dict()
    for lang in languages:
        logging.info("Parsing {}.".format(lang))

        poss_dict = defaultdict(lambda: [], read_possibility_dictionary(poss_dict_files[lang]))
        feature_counts = read_feature_counts(feature_count_files[lang])
        possibility_counts = ((possible_bigrams(poss_dict, feature), count) for feature, count in feature_counts)
        #Add results to dictionary

        features[lang] = Counter(dict(possibility_counts))
    return features


def possible_bigrams(poss_dict, feature):
    possible_node_funs = possible_functions(poss_dict, feature[0], feature[2])
    if len(feature) > 4:
        possible_head_funs = possible_functions(poss_dict, feature[4], feature[6])
    else:
        possible_head_funs = ['ROOT']
    return frozenset(product(possible_node_funs, possible_head_funs))


def possible_functions(poss_dict, lemma, ud_cat):
    possible_categories = POSSIBLE_GF_CATS_BY_UD_CAT[ud_cat]
    possible_functions = [gf_function for cat in possible_categories
                          for gf_function in poss_dict[(lemma, cat)]]

    return possible_functions if len(possible_functions) > 0 else ['OOV_' + ud_cat]